0. Dodatkowe pakiety
#na 'swiezej' maszynie trzeba jeszcze doinstalowac
apt-get install g++ make openssl-dev

1. Instalacja Apache
apt-get install apache2
apt-get install libapache2-mod-wsgi
a2enmod wsgi alias headers deflate
#zmieniamy /etc/apache2/sites-enabled/000-default jak na VM
#ustawiamy ACLe na projekcie django tak, aby mial do nich dostep demon apache (uzytkownik www-data)
service apache2 restart

2. Instalacja django ...
# django
apt-get install django
# djcelery
apt-get install python-pip
pip install django-celery
# rabbitmq
apt-get install rabbitmq-server

# baza danych
# odpalamy mysql, np:
mysql --user=root --password=kartofel

create user jnp3;
create database jnp3;
grant all privileges on jnp3.* to 'jnp3'@'localhost' identified by 'jnp3';

cd /home/jnp3/repo/jnp3/
python manage.py syncdb

3. HandlerSocket
# niestety nie działa: apt-get install handlersocket-mysql-5.1
# gdyż coś znóbili w tej wersji, która jest w repo
# trzeba:
apt-get install mysql-server
apt-get install mysql-source-5.1
apt-get install libtool
apt-get install automake
apt-get install libmysqlclient-dev
cd /usr/src/mysql
tar xvvf mysql-source-5.1.tar.gz

git clone git://github.com/ahiguti/HandlerSocket-Plugin-for-MySQL.git
# przepisane z https://github.com/ahiguti/HandlerSocket-Plugin-for-MySQL/blob/master/docs-en/installation.en.txt#L70
cd HandlerSocket-Plugin-for-MySQL
./autogen.sh
./configure --with-mysql-source=/usr/src/mysql/mysql-5.1 --with-mysql-bindir=/usr/bin --with-mysql-plugindir=/usr/lib/mysql/plugin
make
sudo make install

# Dodać na koniec pliku /etc/mysql/my.cnf
[mysqld]
loose_handlersocket_port = 9998
# the port number to bind to (for read requests)
loose_handlersocket_port_wr = 9999
# the port number to bind to (for write requests)
loose_handlersocket_threads = 16
# the number of worker threads (for read requests)
loose_handlersocket_threads_wr = 1
# the number of worker threads (for write requests)
open_files_limit = 65535
# to allow handlersocket accept many concurrent
# connections, make open_files_limit as large as
# possible.

# Potem mysql na roota np. mysql --user=root --password=kartofel
install plugin handlersocket soname 'handlersocket.so';

create database hstest;
use hstest;

CREATE TABLE `sessions` (
    `session_key` varchar(40) NOT NULL PRIMARY KEY,
    `session_data` text NOT NULL,
    `expire_date` datetime NOT NULL
);

create table `photos` (
    `owner` int,
    `nb` int,
    `status` varchar(1),
    `desc` varchar(1024),
    `id` int not null AUTO_INCREMENT,
    primary key (`owner`, `nb`),
    unique (id)
);

create index photos_by_owner_status on photos (owner, status);

create table `users` (
    `id`           int          not null primary key auto_increment,
    `username`     varchar(255) not null,
    `password`     varchar(255) not null,
    `ready_photos` int          not null,
    `all_photos`   int          not null
);

-- Jakoś nie trzeba dawać dodatkowych pól - HandlerSocket pozwala pobrać wartości
-- z kolumn, które nie występują w indeksie, mimo że dokumentacja mówi coś innego
create unique index `users_by_username` on `users` (
    `username`);


# Zabawne, że nigrzyba nie chce mi działać handlersocket bez zapychacza
# tak jakby nie działał na tabelach z dwoma kolumnami czy coś......
# insert nie dodaje nic wtedy do tabeli
# wystarczy dodać kolumnę i już działa WTF?


# Przetestowanie:
show processlist;

# potrzebne dla python-handler-socket
apt-get install build-essential
apt-get install python-dev
pip install python-handler-socket

4. Instalacja Varnish Cache
apt-get install curl
curl http://repo.varnish-cache.org/debian/GPG-key.txt | apt-key add -
echo "deb http://repo.varnish-cache.org/ubuntu/ lucid varnish-3.0" >> /etc/apt/sources.list
apt-get update
apt-get install varnish

# zmieniamy port apache na 8080:
# w pliku /etc/apache2/ports.conf zamienic
NameVirtualHost *:80
Listen 80
# na
NameVirtualHost *:8080
Listen 8080

# w pliku /etc/apache2/sites-enabled/000-default zamienic
<VirtualHost *:80>
# na
<VirtualHost *:8080>

# w katalogu repo wykonujemy
cp config/default.vcl /etc/varnish/default.vcl

# w pliku /etc/default/varnish zmienic
DAEMON_OPTS="a :6081 \
            -T localhost:6082 \
            -f /etc/varnish/default.vcl \
            -S /etc/varnish/secret \
            -s malloc,256m"
# na
DAEMON_OPTS="-f /etc/varnish/default.vcl \
             -S /etc/varnish/secret \
			 -s malloc,1G"

service apache2 restart
/etc/init.d/varnish force-reload

5. Biblioteka PIL
sudo pip install PIL

jak w podsumowaniu będzie napisane, że nie ma jpega, to problem jest opisany tutaj:
  http://stackoverflow.com/questions/7648200/pip-install-pil-e-tickets-1-no-jpeg-png-support
robimy pip uninstall PIL, wykonujemy sudo ln .... i instalujemy ponownie

6. Sphinx
apt-get install sphinxsearch
pip install sphinxsearch

cp ./config/sphinx.conf /etc/sphinxsearch/sphinx.conf
# zmienić PIDFILE w /etc/init.d/sphinxsearch na:
PIDFILE=/tmp/searchd.pid

# odpalić indexer
indexer photos_idx --rotate

# cron
crontab -e
# dodać linijkę:
0 3 * * * /usr/bin/indexer --quiet photos_idx --rotate > /dev/null 2>&1

7. Instalacja MogileFS

# podstawowe pakiety i caly tlum jakis perlowych zaleznosci :(
echo "deb http://ppa.launchpad.net/awmcclain/ppa/ubuntu jaunty main" >> /etc/apt/sources.list
apt-get update
apt-get install mogilefsd mogstored
apt-get install subversion
apt-get install libio-aio-perl libbsd-resource-perl libcompress-zlib-perl libnet-netmask-perl libio-stringy-perl libwww-perl


# dodajemy baze mysql
mysql --user=root --password=kartofel
CREATE DATABASE mogilefs;
CREATE USER 'mogilefs'@'localhost' IDENTIFIED BY 'mogilefs';
GRANT ALL ON mogilefs.* TO 'mogilefs'@'localhost';
FLUSH PRIVILEGES;
COMMIT;

# generujemy tabele
mogdbsetup --dbhost=localhost --dbname=mogilefs --dbuser=mogilefs --dbpassword=mogilefs

# trzeba doinstalowac jeszcze dwie rzeczy,
# nie znalazlem lepszego sposobu niz kompilacja ze zrodel

# instalacja MogileFS-Client (wersja z najwyzszym numerkiem)

cd /usr/src
svn checkout http://code.sixapart.com/svn/mogilefs/tags/MogileFS-Client-1.12/
cd MogileFS-Client-1.12/
perl Makefile.PL
make
make install

# instalacja Mogadm (jw.)

cd /usr/src
svn checkout http://code.sixapart.com/svn/mogilefs/tags/MogileFS-Utils-2.17/
cd MogileFS-Utils-2.17/
perl Makefile.PL
make
make install

# edytujemy pliki
# /etc/mogilefs/mogilefsd.conf
db_user = mogilefs
db_pass = mogilefs
listen = 0.0.0.0.:7001

# /etc/mogilefs/mogstored.conf
docroot = /usr/mogdata

# tworzymy katalogi na dane
mkdir -p /usr/mogdata/dev1
mkdir -p /usr/mogdata/dev2
chown mogstored /usr/mogdata/*

# odpalamy
service mogilefsd start
service mogstored restart

# wydajemy jakies tam losowe polecenia
# to, zeby daemon sie zorientowal, jaki ip i port (tu domyslny)
# ma ktos, kto trzyma nasze dane
mogadm --trackers=127.0.0.1:7001 host add local --ip=127.0.0.1 --status=alive
# po costam kazdy host moze miec wiele zrodel danych, wiec tu je dodajemy
mogadm --trackers=127.0.0.1:7001 device add local 1
mogadm --trackers=127.0.0.1:7001 device add local 2
# i jeszcze tworzymy jakas domene, nie wiem po co ona komu,
# ale funkcje w pythonie chca, zeby im takowa podac...
mogadm --trackers=127.0.0.1:7001 domain add mogile
mogadm --trackers=127.0.0.1:7001 class add mogile mogile --mindevcount=1

# sprawdzamy czy dziala
mogadm --trackers=127.0.0.1:7001 check

# potrzebujemy jakiejs biblioteki do pythona
# pymogile ma niepusty README :)
cd /usr/src
git clone https://github.com/AloneRoad/pymogile.git
cd pymogile
python setup.py build
python setup.py install

# kasowanie wszystkich plikow
# na razie nie znalazlem jakiejs firmowej metody
# wiec robimy brutalnie:

rm -rf /usr/mogdata/dev1/* /usr/mogdata/dev2/*
service mogstored restart


-1. Na samym końcu
# Musimy jeszcze wystartować demona do wykonywania asynchronicznych zadań
python manage.py celeryd -l info
